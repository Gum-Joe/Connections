0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'bcrypt' ]
2 info using npm@2.11.2
3 info using node@v0.12.5
4 verbose install initial load of C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\package.json
5 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\body-parser\package.json
6 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\cookie-parser\package.json
7 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\debug\package.json
8 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\ejs\package.json
9 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\express\package.json
10 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\jade\package.json
11 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\mongodb\package.json
12 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\mongoose\package.json
13 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\morgan\package.json
14 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\passport\package.json
15 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\passport-google\package.json
16 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\passport-http\package.json
17 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\passport-local\package.json
18 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\serve-favicon\package.json
19 verbose installManyTop reading scoped package data from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\stylus\package.json
20 info package.json debug@2.0.0 No license field.
21 info package.json passport-google@0.3.0 No license field.
22 info package.json passport-local@1.0.0 No license field.
23 info package.json passport-http@0.2.2 No license field.
24 info package.json stylus@0.42.3 No license field.
25 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\package.json
26 silly cache add args [ 'bcrypt@0.8.3', null ]
27 verbose cache add spec bcrypt@0.8.3
28 silly cache add parsed spec { raw: 'bcrypt@0.8.3',
28 silly cache add   scope: null,
28 silly cache add   name: 'bcrypt',
28 silly cache add   rawSpec: '0.8.3',
28 silly cache add   spec: '0.8.3',
28 silly cache add   type: 'version' }
29 silly addNamed bcrypt@0.8.3
30 verbose addNamed "0.8.3" is a plain semver version for bcrypt
31 silly mapToRegistry name bcrypt
32 silly mapToRegistry using default registry
33 silly mapToRegistry registry https://registry.npmjs.org/
34 silly mapToRegistry uri https://registry.npmjs.org/bcrypt
35 verbose addNameVersion registry:https://registry.npmjs.org/bcrypt not in flight; fetching
36 verbose request uri https://registry.npmjs.org/bcrypt
37 verbose request no auth needed
38 info attempt registry request try #1 at 7:42:04 PM
39 verbose request id 1a1addca02455ae1
40 verbose etag "6VE93HZG2OYZT507O9B0SPVOZ"
41 http request GET https://registry.npmjs.org/bcrypt
42 info retry will retry, error on last attempt: Error: connect EACCES
43 info attempt registry request try #2 at 7:42:14 PM
44 verbose etag "6VE93HZG2OYZT507O9B0SPVOZ"
45 http request GET https://registry.npmjs.org/bcrypt
46 info retry will retry, error on last attempt: Error: connect EACCES
47 info attempt registry request try #3 at 7:43:14 PM
48 verbose etag "6VE93HZG2OYZT507O9B0SPVOZ"
49 http request GET https://registry.npmjs.org/bcrypt
50 silly get cb [ 304, undefined ]
51 verbose etag https://registry.npmjs.org/bcrypt from cache
52 verbose get saving bcrypt to C:\Users\hp1\AppData\Roaming\npm-cache\registry.npmjs.org\bcrypt\.cache.json
53 silly cache afterAdd bcrypt@0.8.3
54 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\bcrypt\0.8.3\package\package.json not in flight; writing
55 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\bcrypt\0.8.3\package\package.json written
56 silly install resolved [ { name: 'bcrypt',
56 silly install resolved     description: 'A bcrypt library for NodeJS.',
56 silly install resolved     keywords:
56 silly install resolved      [ 'bcrypt',
56 silly install resolved        'password',
56 silly install resolved        'auth',
56 silly install resolved        'authentication',
56 silly install resolved        'encryption',
56 silly install resolved        'crypt',
56 silly install resolved        'crypto' ],
56 silly install resolved     main: './bcrypt',
56 silly install resolved     version: '0.8.3',
56 silly install resolved     author: { name: 'Nick Campbell', url: 'https://github.com/ncb000gt' },
56 silly install resolved     engines: { node: '>= 0.6.0' },
56 silly install resolved     repository:
56 silly install resolved      { type: 'git',
56 silly install resolved        url: 'git+https://github.com/ncb000gt/node.bcrypt.js.git' },
56 silly install resolved     licenses: [ [Object] ],
56 silly install resolved     bugs: { url: 'https://github.com/ncb000gt/node.bcrypt.js/issues' },
56 silly install resolved     scripts:
56 silly install resolved      { test: 'node-gyp configure build && nodeunit test',
56 silly install resolved        install: 'node-gyp rebuild' },
56 silly install resolved     dependencies: { bindings: '1.2.1', nan: '1.8.4' },
56 silly install resolved     devDependencies: { nodeunit: '>=0.6.4' },
56 silly install resolved     contributors:
56 silly install resolved      [ [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object],
56 silly install resolved        [Object] ],
56 silly install resolved     gypfile: true,
56 silly install resolved     readme: '# node.bcrypt.js\n\n[![Join the chat at https://gitter.im/ncb000gt/node.bcrypt.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ncb000gt/node.bcrypt.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/ncb000gt/node.bcrypt.js.svg?branch=master)](https://travis-ci.org/ncb000gt/node.bcrypt.js)\n\nLib to help you hash passwords.\n[bcrypt on wikipedia][bcryptwiki]\n\nCatalyst for this module: [How To Safely Store A Password][codahale]\n\n## If You Are Submitting Bugs/Issues\n\nFirst, make sure that the version of node you are using is a _stable_ version. You\'ll know this because it\'ll have an even major release number. We do not currently support unstable versions and while the module may happen to work on some unstable versions you\'ll find that we quickly close issues if you\'re not using a stable version.\n\nIf you are on a stable version of node, we can\'t magically know what you are doing to expose an issue, it is best if you provide a snippet of code or log files if you\'re having an install issue. This snippet need not include your secret sauce, but it must replicate the issue you are describing. The issues that get closed without resolution tend to be the ones that don\'t help us help you. Thanks.\n\n\n## Version Compatibility\n\n| Node Version | Bcrypt Version |\n| ---- | ---- |\n| 0.4.x | <= 0.4.x |\n| 0.6.x | >= 0.5.x |\n| 0.8.x | >= 0.5.x |\n| 0.10.x | >= 0.5.x |\n| 0.11.x | >= 0.8.x |\n\nWindows users should make sure to have at least node 0.8.5 installed and version >= 0.7.1 of this module.\n\n`node-gyp` only works with stable/released versions of node. Since the `bcrypt` module uses `node-gyp` to build and install you\'ll need a stable version of node to use bcrypt. If you do not you\'ll likely see an error that starts with:\n\n```\ngyp ERR! stack Error: "pre" versions of node cannot be installed, use the --nodedir flag instead\n```\n\n## Security Issues/Concerns\n\nAs should be the case with any security tool, this library should be scrutinized by anyone using it. If you find or suspect an issue with the code- please bring it to my attention and I\'ll spend some time trying to make sure that this tool is as secure as possible.\n\nTo make it easier for people using this tool to analyze what has been surveyed, here is a list of BCrypt related security issues/concerns as they\'ve come up.\n\n* An [issue with passwords][jtr] was found with a version of the Blowfish algorithm developed for John the Ripper. This is not present in the OpenBSD version and is thus not a problem for this module. HT [zooko][zooko].\n\n## Dependencies\n\n* NodeJS\n* `node-gyp`\n * Please check the dependencies for this tool at: https://github.com/TooTallNate/node-gyp/\n  * Windows users will need the options for c# and c++ installed with their visual studio instance.\n  * Python 2.x\n* `OpenSSL` - This is only required to build the `bcrypt` project if you are using versions <= 0.7.7. Otherwise, we\'re using the builtin node crypto bindings for seed data (which use the same OpenSSL code paths we were, but don\'t have the external dependency).\n\n## Install via NPM\n```\nnpm install bcrypt\n```\n\n***Note:*** OS X users using Xcode 4.3.1 or above may need to run the following command in their terminal prior to installing if errors occur regarding xcodebuild: ```sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer```\n\n## Usage\n\n### async (recommended)\n\nTo hash a password:\n\n```javascript\nvar bcrypt = require(\'bcrypt\');\nbcrypt.genSalt(10, function(err, salt) {\n    bcrypt.hash(\'B4c0/\\/\', salt, function(err, hash) {\n        // Store hash in your password DB.\n    });\n});\n```\n\nTo check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(\'B4c0/\\/\', hash, function(err, res) {\n    // res == true\n});\nbcrypt.compare(\'not_bacon\', hash, function(err, res) {\n    // res == false\n});\n```\n\nAuto-gen a salt and hash:\n\n```javascript\nbcrypt.hash(\'bacon\', 8, function(err, hash) {\n});\n```\n\n\n### sync\n\nTo hash a password:\n\n```javascript\nvar bcrypt = require(\'bcrypt\');\nvar salt = bcrypt.genSaltSync(10);\nvar hash = bcrypt.hashSync(\'B4c0/\\/\', salt);\n// Store hash in your password DB.\n```\n\nTo check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compareSync(\'B4c0/\\/\', hash); // true\nbcrypt.compareSync(\'not_bacon\', hash); // false\n```\n\nAuto-gen a salt and hash:\n\n```javascript\nvar hash = bcrypt.hashSync(\'bacon\', 8);\n```\n\n## API\n\n`BCrypt.`\n\n  * `genSaltSync(rounds)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n  * `genSalt(rounds, cb)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n    * `cb` - [REQUIRED] - a callback to be fired once the salt has been generated. uses eio making it asynchronous.\n      * `err` - First parameter to the callback detailing any errors.\n      * `salt` - Second parameter to the callback providing the generated salt.\n  * `hashSync(data, salt)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used in encryption.\n  * `hash(data, salt, cb)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated and used (see examples).\n    * `cb` - [REQUIRED] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous.\n      * `err` - First parameter to the callback detailing any errors.\n      * `encrypted` - Second parameter to the callback providing the encrypted form.\n  * `compareSync(data, encrypted)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n  * `compare(data, encrypted, cb)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n    * `cb` - [REQUIRED] - a callback to be fired once the data has been compared. uses eio making it asynchronous.\n      * `err` - First parameter to the callback detailing any errors.\n      * `same` - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\n  * `getRounds(encrypted)` - return the number of rounds used to encrypt a given hash\n    * `encrypted` - [REQUIRED] - hash from which the number of rounds used should be extracted.\n\n## A Note on Rounds\n\nA note about the cost. When you are hashing your data the module will go through a series of rounds to give you a secure hash. The value you submit there is not just the number of rounds that the module will go through to hash your data. The module will use the value you enter and go through `2^rounds` iterations of processing.\n\nFrom @garthk, on a 2GHz core you can roughly expect:\n\n    rounds=8 : ~40 hashes/sec\n    rounds=9 : ~20 hashes/sec\n    rounds=10: ~10 hashes/sec\n    rounds=11: ~5  hashes/sec\n    rounds=12: 2-3 hashes/sec\n    rounds=13: ~1 sec/hash\n    rounds=14: ~1.5 sec/hash\n    rounds=15: ~3 sec/hash\n    rounds=25: ~1 hour/hash\n    rounds=31: 2-3 days/hash\n\n\n## Hash Info\n\nThe characters that comprise the resultant hash are `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$`.\n\nResultant hashes will be 60 characters long.\n\n## Testing\n\nIf you create a pull request, tests better pass :)\n\n```\nnpm install\nnpm test\n```\n\n## Credits\n\nThe code for this comes from a few sources:\n\n* blowfish.cc - OpenBSD\n* bcrypt.cc - OpenBSD\n* bcrypt::gen_salt - [gen_salt inclusion to bcrypt][bcryptgs]\n* bcrypt_node.cc - me\n\n## Contributors\n\n* [Antonio Salazar Cardozo][shadowfiend] - Early MacOS X support (when we used libbsd)\n* [Ben Glow][pixelglow] - Fixes for thread safety with async calls\n* [Van Nguyen][thegoleffect] - Found a timing attack in the comparator\n* [NewITFarmer][newitfarmer] - Initial Cygwin support\n* [David Trejo][dtrejo] - packaging fixes\n* [Alfred Westerveld][alfredwesterveld] - packaging fixes\n* [Vincent Côté-Roy][vincentr] - Testing around concurrency issues\n* [Lloyd Hilaiel][lloyd] - Documentation fixes\n* [Roman Shtylman][shtylman] - Code refactoring, general rot reduction, compile options, better memory management with delete and new, and an upgrade to libuv over eio/ev.\n* [Vadim Graboys][vadimg] - Code changes to support 0.5.5+\n* [Ben Noordhuis][bnoordhuis] - Fixed a thread safety issue in nodejs that was perfectly mappable to this module.\n* [Nate Rajlich][tootallnate] - Bindings and build process.\n* [Sean McArthur][seanmonstar] - Windows Support\n* [Fanie Oosthuysen][weareu] - Windows Support\n\n## License\nUnless stated elsewhere, file headers or otherwise, the license as stated in the LICENSE file.\n\n[bcryptwiki]: http://en.wikipedia.org/wiki/Bcrypt\n[bcryptgs]: http://mail-index.netbsd.org/tech-crypto/2002/05/24/msg000204.html\n[codahale]: http://codahale.com/how-to-safely-store-a-password/\n[gh13]: https://github.com/ncb000gt/node.bcrypt.js/issues/13\n[jtr]: http://www.openwall.com/lists/oss-security/2011/06/20/2\n\n[shadowfiend]:https://github.com/Shadowfiend\n[thegoleffect]:https://github.com/thegoleffect\n[pixelglow]:https://github.com/pixelglow\n[dtrejo]:https://github.com/dtrejo\n[alfredwesterveld]:https://github.com/alfredwesterveld\n[newitfarmer]:https://github.com/newitfarmer\n[zooko]:https://twitter.com/zooko\n[vincentr]:https://twitter.com/vincentcr\n[lloyd]:https://github.com/lloyd\n[shtylman]:https://github.com/shtylman\n[vadimg]:https://github.com/vadimg\n[bnoordhuis]:https://github.com/bnoordhuis\n[tootallnate]:https://github.com/tootallnate\n[seanmonstar]:https://github.com/seanmonstar\n[weareu]:https://github.com/weareu\n',
56 silly install resolved     readmeFilename: 'README.md',
56 silly install resolved     homepage: 'https://github.com/ncb000gt/node.bcrypt.js',
56 silly install resolved     _id: 'bcrypt@0.8.3',
56 silly install resolved     _shasum: '714f92307246a35350744312b0d6a11a4abf792e',
56 silly install resolved     _from: 'bcrypt@0.8.3',
56 silly install resolved     _resolved: 'https://registry.npmjs.org/bcrypt/-/bcrypt-0.8.3.tgz' } ]
57 info install bcrypt@0.8.3 into C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions
58 info installOne bcrypt@0.8.3
59 verbose installOne of bcrypt to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions not in flight; installing
60 verbose lock using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\bcrypt-76c4361bc2ffd257.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
61 silly install write writing bcrypt 0.8.3 to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
62 verbose unbuild node_modules\bcrypt
63 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt is being purged from base C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions
64 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
65 verbose tar unpack C:\Users\hp1\AppData\Roaming\npm-cache\bcrypt\0.8.3\package.tgz
66 verbose tar unpacking to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
67 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt is being purged
68 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
69 silly gunzTarPerm modes [ '777', '666' ]
70 silly gunzTarPerm extractEntry package.json
71 silly gunzTarPerm modified mode [ 'package.json', 420, 438 ]
72 silly gunzTarPerm extractEntry .npmignore
73 silly gunzTarPerm modified mode [ '.npmignore', 420, 438 ]
74 silly gunzTarPerm extractEntry README.md
75 silly gunzTarPerm modified mode [ 'README.md', 420, 438 ]
76 silly gunzTarPerm extractEntry LICENSE
77 silly gunzTarPerm modified mode [ 'LICENSE', 420, 438 ]
78 silly gunzTarPerm extractEntry bcrypt.js
79 silly gunzTarPerm modified mode [ 'bcrypt.js', 420, 438 ]
80 silly gunzTarPerm extractEntry binding.gyp
81 silly gunzTarPerm modified mode [ 'binding.gyp', 420, 438 ]
82 silly gunzTarPerm extractEntry .travis.yml
83 silly gunzTarPerm modified mode [ '.travis.yml', 420, 438 ]
84 silly gunzTarPerm extractEntry CHANGELOG.md
85 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 420, 438 ]
86 silly gunzTarPerm extractEntry examples/async_compare.js
87 silly gunzTarPerm modified mode [ 'examples/async_compare.js', 420, 438 ]
88 silly gunzTarPerm extractEntry examples/forever_gen_salt.js
89 silly gunzTarPerm modified mode [ 'examples/forever_gen_salt.js', 420, 438 ]
90 silly gunzTarPerm extractEntry test/async.js
91 silly gunzTarPerm modified mode [ 'test/async.js', 420, 438 ]
92 silly gunzTarPerm extractEntry test/repetitions.js
93 silly gunzTarPerm modified mode [ 'test/repetitions.js', 420, 438 ]
94 silly gunzTarPerm extractEntry test/sync.js
95 silly gunzTarPerm modified mode [ 'test/sync.js', 420, 438 ]
96 silly gunzTarPerm extractEntry Makefile
97 silly gunzTarPerm modified mode [ 'Makefile', 420, 438 ]
98 silly gunzTarPerm extractEntry src/bcrypt.cc
99 silly gunzTarPerm modified mode [ 'src/bcrypt.cc', 420, 438 ]
100 silly gunzTarPerm extractEntry src/bcrypt_node.cc
101 silly gunzTarPerm modified mode [ 'src/bcrypt_node.cc', 420, 438 ]
102 silly gunzTarPerm extractEntry src/blowfish.cc
103 silly gunzTarPerm modified mode [ 'src/blowfish.cc', 420, 438 ]
104 silly gunzTarPerm extractEntry src/node_blf.h
105 silly gunzTarPerm modified mode [ 'src/node_blf.h', 420, 438 ]
106 silly gunzTarPerm extractEntry werker.yml
107 silly gunzTarPerm modified mode [ 'werker.yml', 420, 438 ]
108 verbose write writing to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\package.json
109 info preinstall bcrypt@0.8.3
110 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\package.json
111 silly prepareForInstallMany adding bindings@1.2.1 from bcrypt dependencies
112 silly prepareForInstallMany adding nan@1.8.4 from bcrypt dependencies
113 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\package.json
114 silly cache add args [ 'nan@1.8.4', null ]
115 verbose cache add spec nan@1.8.4
116 silly cache add parsed spec { raw: 'nan@1.8.4',
116 silly cache add   scope: null,
116 silly cache add   name: 'nan',
116 silly cache add   rawSpec: '1.8.4',
116 silly cache add   spec: '1.8.4',
116 silly cache add   type: 'version' }
117 silly addNamed nan@1.8.4
118 verbose addNamed "1.8.4" is a plain semver version for nan
119 silly mapToRegistry name nan
120 silly mapToRegistry using default registry
121 silly mapToRegistry registry https://registry.npmjs.org/
122 silly mapToRegistry uri https://registry.npmjs.org/nan
123 verbose addNameVersion registry:https://registry.npmjs.org/nan not in flight; fetching
124 silly cache add args [ 'bindings@1.2.1', null ]
125 verbose cache add spec bindings@1.2.1
126 silly cache add parsed spec { raw: 'bindings@1.2.1',
126 silly cache add   scope: null,
126 silly cache add   name: 'bindings',
126 silly cache add   rawSpec: '1.2.1',
126 silly cache add   spec: '1.2.1',
126 silly cache add   type: 'version' }
127 silly addNamed bindings@1.2.1
128 verbose addNamed "1.2.1" is a plain semver version for bindings
129 silly mapToRegistry name bindings
130 silly mapToRegistry using default registry
131 silly mapToRegistry registry https://registry.npmjs.org/
132 silly mapToRegistry uri https://registry.npmjs.org/bindings
133 verbose addNameVersion registry:https://registry.npmjs.org/bindings not in flight; fetching
134 verbose request uri https://registry.npmjs.org/bindings
135 verbose request no auth needed
136 info attempt registry request try #1 at 7:43:14 PM
137 verbose etag "BCS5XYG9ISNJFNKEL5FLOI5HX"
138 http request GET https://registry.npmjs.org/bindings
139 verbose request uri https://registry.npmjs.org/nan
140 verbose request no auth needed
141 info attempt registry request try #1 at 7:43:14 PM
142 verbose etag "CWMZR9BQ6YD6KL99MGG0CU5U5"
143 http request GET https://registry.npmjs.org/nan
144 info retry will retry, error on last attempt: Error: connect EACCES
145 info retry will retry, error on last attempt: Error: connect EACCES
146 info attempt registry request try #2 at 7:43:24 PM
147 verbose etag "BCS5XYG9ISNJFNKEL5FLOI5HX"
148 http request GET https://registry.npmjs.org/bindings
149 info attempt registry request try #2 at 7:43:24 PM
150 verbose etag "CWMZR9BQ6YD6KL99MGG0CU5U5"
151 http request GET https://registry.npmjs.org/nan
152 info retry will retry, error on last attempt: Error: connect EACCES
153 info retry will retry, error on last attempt: Error: connect EACCES
154 info attempt registry request try #3 at 7:44:25 PM
155 verbose etag "CWMZR9BQ6YD6KL99MGG0CU5U5"
156 http request GET https://registry.npmjs.org/nan
157 info attempt registry request try #3 at 7:44:25 PM
158 verbose etag "BCS5XYG9ISNJFNKEL5FLOI5HX"
159 http request GET https://registry.npmjs.org/bindings
160 silly get cb [ 304, undefined ]
161 verbose etag https://registry.npmjs.org/bindings from cache
162 verbose get saving bindings to C:\Users\hp1\AppData\Roaming\npm-cache\registry.npmjs.org\bindings\.cache.json
163 silly get cb [ 304, undefined ]
164 verbose etag https://registry.npmjs.org/nan from cache
165 verbose get saving nan to C:\Users\hp1\AppData\Roaming\npm-cache\registry.npmjs.org\nan\.cache.json
166 silly cache afterAdd bindings@1.2.1
167 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\bindings\1.2.1\package\package.json not in flight; writing
168 silly cache afterAdd nan@1.8.4
169 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\nan\1.8.4\package\package.json not in flight; writing
170 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\bindings\1.2.1\package\package.json written
171 verbose afterAdd C:\Users\hp1\AppData\Roaming\npm-cache\nan\1.8.4\package\package.json written
172 silly install resolved [ { name: 'bindings',
172 silly install resolved     description: 'Helper module for loading your native module\'s .node file',
172 silly install resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
172 silly install resolved     version: '1.2.1',
172 silly install resolved     author:
172 silly install resolved      { name: 'Nathan Rajlich',
172 silly install resolved        email: 'nathan@tootallnate.net',
172 silly install resolved        url: 'http://tootallnate.net' },
172 silly install resolved     repository:
172 silly install resolved      { type: 'git',
172 silly install resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
172 silly install resolved     main: './bindings.js',
172 silly install resolved     bugs: { url: 'https://github.com/TooTallNate/node-bindings/issues' },
172 silly install resolved     homepage: 'https://github.com/TooTallNate/node-bindings',
172 silly install resolved     license: 'MIT',
172 silly install resolved     gitHead: 'e404152ee27f8478ccbc7122ee051246e8e5ec02',
172 silly install resolved     _id: 'bindings@1.2.1',
172 silly install resolved     scripts: {},
172 silly install resolved     _shasum: '14ad6113812d2d37d72e67b4cacb4bb726505f11',
172 silly install resolved     _from: 'bindings@1.2.1',
172 silly install resolved     _npmVersion: '1.4.14',
172 silly install resolved     _npmUser: { name: 'tootallnate', email: 'nathan@tootallnate.net' },
172 silly install resolved     maintainers: [ [Object], [Object] ],
172 silly install resolved     dist:
172 silly install resolved      { shasum: '14ad6113812d2d37d72e67b4cacb4bb726505f11',
172 silly install resolved        tarball: 'http://registry.npmjs.org/bindings/-/bindings-1.2.1.tgz' },
172 silly install resolved     directories: {},
172 silly install resolved     _resolved: 'https://registry.npmjs.org/bindings/-/bindings-1.2.1.tgz',
172 silly install resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
172 silly install resolved     readmeFilename: 'README.md' },
172 silly install resolved   { name: 'nan',
172 silly install resolved     version: '1.8.4',
172 silly install resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
172 silly install resolved     main: 'include_dirs.js',
172 silly install resolved     repository: { type: 'git', url: 'git://github.com/iojs/nan.git' },
172 silly install resolved     scripts:
172 silly install resolved      { test: 'tap --gc test/js/*-test.js',
172 silly install resolved        'rebuild-tests': 'pangyp rebuild --directory test' },
172 silly install resolved     contributors:
172 silly install resolved      [ [Object],
172 silly install resolved        [Object],
172 silly install resolved        [Object],
172 silly install resolved        [Object],
172 silly install resolved        [Object],
172 silly install resolved        [Object],
172 silly install resolved        [Object] ],
172 silly install resolved     devDependencies:
172 silly install resolved      { bindings: '~1.2.1',
172 silly install resolved        'node-gyp': '~1.0.2',
172 silly install resolved        pangyp: '~2.0.1',
172 silly install resolved        tap: '~0.7.1',
172 silly install resolved        xtend: '~4.0.0' },
172 silly install resolved     license: 'MIT',
172 silly install resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.12 as well as io.js.**\n\n***Current version: 1.8.4***\n\n*(See [CHANGELOG.md](https://github.com/iojs/nan/blob/master/CHANGELOG.md) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true&downloadRank=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6&height=3)](https://nodei.co/npm/nan/)\n\n[![Build Status](https://api.travis-ci.org/iojs/nan.svg?branch=master)](http://travis-ci.org/iojs/nan)\n[![Build status](https://ci.appveyor.com/api/projects/status/kh73pbm9dsju7fgh)](https://ci.appveyor.com/project/RodVagg/nan)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n * **[Tests](#tests)**\n * **[Porting](#porting)**\n * **[Governance & Contributing](#governance)**\n\n<a name="news"></a>\n## News & Updates\n\n### Apr-2015: 1.8.0 release\n\n* Support V8 4.2\n* Removed support for creating `Signature`s with arguments\n* Backported thread local storage routines for libuv\n\n### Feb-2015: 1.7.0 release\n\n* Made `NanCallback::Call` accept optional target\n* Support atom-shell 0.21\n\nNode 0.12.0 is out and supported by NAN. So is atom-shell 0.21. `NanCallback::Call` now accepts an optional `target` argument like `NanMakeCallback`.\n\n### Jan-2015: 1.6.0 release\n\n* Deprecated `NanNewContextHandle` in favor of `NanNew<Context>`\n* Added `NanSetCounterFunction`, `NanSetCreateHistogramFunction`, `NanSetAddHistogramSampleFunction`\n* Added `NanIdleNotification`, `NanLowMemoryNotification`, `NanContextDisposedNotification`\n* Added `NanEncode`, `NanDecodeBytes` and `NanDecodeWrite`\n\n### Jan-2015: 1.5.0 release\n\n* Support [io.js](https://github.com/iojs/io.js) thanks to [Ben Noordhuis](bnoordhuis)\n* Rewritten NanNew internals thanks to [David Siegel](agnat)\n* NanAsyncWorker now supports progress reporting thanks to [Brett Lawson](brett19)\n\n### Aug-2014: 1.3.0 release\n\n* `NanCString()` and `NanRawString()` have been deprecated in favour of new <a href="#api_nan_ascii_string"><b><code>NanAsciiString</code></b></a>, <a href="#api_nan_utf8_string"><b><code>NanUtf8String</code></b></a> and <a href="#api_nan_ucs2_string"><b><code>NanUcs2String</code></b></a>. These classes manage the underlying memory for you in a safer way than just handing off an allocated array. You should now `*NanAsciiString(handle)` to access the raw `char` data, you can also allocate on the heap if you need to keep a reference.\n* Two more <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a> overloads have been added to for parity with Node core.\n* You can now `NanNew(std::string)` (use `NanNew<std::string&>(std::string&)` to pass by reference)\n* <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>, <a href="#api_nan_set_prototype_template"><b><code>NanSetPrototypeTemplate</code></b></a> and <a href="#api_nan_set_instance_template"><b><code>NanSetInstanceTemplate</code></b></a> have been added.\n\n### May-2014: 1.1.0 release\n\n* We\'ve deprecated `NanSymbol()`, you should just use `NanNew<String>()` now.\n* `NanNull()`, `NanUndefined()`, `NanTrue()`, `NanFalse()` all return `Local`s now.\n* `nan_isolate` is gone, it was intended to be internal-only but if you were using it then you should switch to `v8::Isolate::GetCurrent()`.\n* `NanNew()` has received some additional overload-love so you should be able to give it many kinds of values without specifying the `<Type>`.\n* Lots of small fixes and additions to expand the V8 API coverage, *use the source, Luke*.\n\n\n### May-2014: Major changes for V8 3.25 / Node 0.11.13\n\nNode 0.11.11 and 0.11.12 were both broken releases for native add-ons, you simply can\'t properly compile against either of them for different reasons. But we now have a 0.11.13 release that jumps a couple of versions of V8 ahead and includes some more, major (traumatic) API changes.\n\nBecause we are now nearing Node 0.12 and estimate that the version of V8 we are using in Node 0.11.13 will be close to the API we get for 0.12, we have taken the opportunity to not only *fix* NAN for 0.11.13 but make some major changes to improve the NAN API.\n\nWe have **removed support for Node 0.11 versions prior to 0.11.13**. As usual, our tests are run against (and pass) the last 5 versions of Node 0.8 and Node 0.10. We also include Node 0.11.13 obviously.\n\nThe major change is something that [Benjamin Byholm](kkoopa) has put many hours in to. We now have a fantastic new `NanNew<T>(args)` interface for creating new `Local`s, this replaces `NanNewLocal()` and much more. If you look in [./nan.h](nan.h) you\'ll see a large number of overloaded versions of this method. In general you should be able to `NanNew<Type>(arguments)` for any type you want to make a `Local` from. This includes `Persistent` types, so we now have a `Local<T> NanNew(const Persistent<T> arg)` to replace `NanPersistentToLocal()`.\n\nWe also now have `NanUndefined()`, `NanNull()`, `NanTrue()` and `NanFalse()`. Mainly because of the new requirement for an `Isolate` argument for each of the native V8 versions of this.\n\nV8 has now introduced an `EscapableHandleScope` from which you `scope.Escape(Local<T> value)` to *return* a value from a one scope to another. This replaces the standard `HandleScope` and `scope.Close(Local<T> value)`, although `HandleScope` still exists for when you don\'t need to return a handle to the caller. For NAN we are exposing it as `NanEscapableScope()` and `NanEscapeScope()`, while `NanScope()` is still how you create a new scope that doesn\'t need to return handles. For older versions of Node/V8, it\'ll still map to the older `HandleScope` functionality.\n\n`NanFromV8String()` was deprecated and has now been removed. You should use `NanCString()` or `NanRawString()` instead.\n\nBecause `node::MakeCallback()` now takes an `Isolate`, and because it doesn\'t exist in older versions of Node, we\'ve introduced `NanMakeCallback()`. You should *always* use this when calling a JavaScript function from C++.\n\nThere\'s lots more, check out the Changelog in nan.h or look through [#86](https://github.com/iojs/nan/pull/86) for all the gory details.\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/iojs/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nFor another example, see **[nan-example-eol](https://github.com/CodeCharmLtd/nan-example-eol)**. It shows newline detection implemented as a native addon.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/iojs/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include <nan.h>\n// ...\n\nusing v8::FunctionTemplate;\nusing v8::Handle;\nusing v8::Object;\nusing v8::String;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanNew<String>("calculateSync"),\n    NanNew<FunctionTemplate>(CalculateSync)->GetFunction());\n\n  exports->Set(NanNew<String>("calculateAsync"),\n    NanNew<FunctionTemplate>(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include <nan.h>\n#include "./sync.h"\n// ...\n\nusing v8::Number;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(NanNew<Number>(est));\n}\n```\n\n```c++\n// async.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateAsync);\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include <nan.h>\n#include "./async.h"\n\n// ...\n\nusing v8::Function;\nusing v8::Local;\nusing v8::Null;\nusing v8::Number;\nusing v8::Value;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        NanNull()\n      , NanNew<Number>(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_gc_callback"><b><code>NAN_GC_CALLBACK</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a>\n * <a href="#api_nan_new"><b><code>NanNew</code></b></a>\n * <a href="#api_nan_undefined"><b><code>NanUndefined</code></b></a>\n * <a href="#api_nan_null"><b><code>NanNull</code></b></a>\n * <a href="#api_nan_true"><b><code>NanTrue</code></b></a>\n * <a href="#api_nan_false"><b><code>NanFalse</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_return_this"><b><code>NanReturnThis</code></b></a>\n * <a href="#api_nan_return_holder"><b><code>NanReturnHolder</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_escapable_scope"><b><code>NanEscapableScope</code></b></a>\n * <a href="#api_nan_escape_scope"><b><code>NanEscapeScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <del><a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a></del>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <del><a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a></del>\n * <del><a href="#api_nan_c_string"><b><code>NanCString</code></b></a></del>\n * <a href="#api_nan_ascii_string"><b><code>NanAsciiString</code></b></a>\n * <a href="#api_nan_utf8_string"><b><code>NanUtf8String</code></b></a>\n * <a href="#api_nan_ucs2_string"><b><code>NanUcs2String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <del><a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a></del>\n * <a href="#api_nan_get_current_context"><b><code>NanGetCurrentContext</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_make_weak_persistent"><b><code>NanMakeWeakPersistent</code></b></a>\n * <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>\n * <a href="#api_nan_set_prototype_template"><b><code>NanSetPrototypeTemplate</code></b></a>\n * <a href="#api_nan_set_instance_template"><b><code>NanSetInstanceTemplate</code></b></a>\n * <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a>\n * <a href="#api_nan_encode"><b><code>NanEncode</code></b></a>\n * <a href="#api_nan_decode_bytes"><b><code>NanDecodeBytes</code></b></a>\n * <a href="#api_nan_decode_write"><b><code>NanDecodeWrite</code></b></a>\n * <a href="#api_nan_compile_script"><b><code>NanCompileScript</code></b></a>\n * <a href="#api_nan_run_script"><b><code>NanRunScript</code></b></a>\n * <a href="#api_nan_adjust_external_memory"><b><code>NanAdjustExternalMemory</code></b></a>\n * <a href="#api_nan_add_gc_epilogue_callback"><b><code>NanAddGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_add_gc_prologue_callback"><b><code>NanAddGCPrologueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_epilogue_callback"><b><code>NanRemoveGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_prologue_callback"><b><code>NanRemoveGCPrologueCallback</code></b></a>\n * <a href="#api_nan_get_heap_statistics"><b><code>NanGetHeapStatistics</code></b></a>\n * <a href="#api_nan_set_counter_function"><b><code>NanSetCounterFunction</code></b></a>\n * <a href="#api_nan_set_create_histogram_function"><b><code>NanSetCreateHistogramFunction</code></b></a>\n * <a href="#api_nan_set_add_histogram_sample_function"><b><code>NanSetAddHistogramSampleFunction</code></b></a>\n * <a href="#api_nan_idle_notification"><b><code>NanIdleNotification</code></b></a>\n * <a href="#api_nan_low_memory_notification"><b><code>NanLowMemoryNotification</code></b></a>\n * <a href="#api_nan_context_disposed_notification"><b><code>NanContextDisposedNotification</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_gc_callback"></a>\n### NAN_GC_CALLBACK(cbname)\nUse `NAN_GC_CALLBACK` to declare your callbacks for `NanAddGCEpilogueCallback` and `NanAddGCPrologueCallback`. You get arguments `GCType type` and `GCCallbackFlags flags`.\n\n```c++\nstatic Persistent<Function> callback;\n\nNAN_GC_CALLBACK(gcPrologueCallback) {\n  Local<Value> argv[] = {NanNew("prologue")};\n  NanMakeCallback(NanGetCurrentContext()->Global(), NanNew(callback), 1, argv);\n}\n\nNAN_METHOD(Hook) {\n  NanScope();\n  NanAssignPersistent(callback, args[0].As<Function>());\n  NanAddGCPrologueCallback(gcPrologueCallback);\n  NanReturnValue(args.Holder());\n}\n```\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(cbname)\n\nUse `NAN_WEAK_CALLBACK` to define your V8 WeakReference callbacks. There is an argument object `const _NanWeakCallbackData<T, P> &data` allowing access to the weak object and the supplied parameter through its `GetValue` and `GetParameter` methods. You can even access the weak callback info object through the `GetCallbackInfo()`method, but you probably should not. `Revive()` keeps the weak object alive until the next GC round.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n  int *parameter = data.GetParameter();\n  NanMakeCallback(NanGetCurrentContext()->Global(), data.GetValue(), 0, NULL);\n  if ((*parameter)++ == 0) {\n    data.Revive();\n  } else {\n    delete parameter;\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED\nDeclares a function as deprecated.\n\n```c++\nstatic NAN_DEPRECATED NAN_METHOD(foo) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE\nInlines a function.\n\n```c++\nNAN_INLINE int foo(int bar) {\n  ...\n}\n```\n\n<a name="api_nan_new"></a>\n### Local&lt;T&gt; NanNew&lt;T&gt;( ... )\n\nUse `NanNew` to construct almost all v8 objects (bound `Script`s are constructed with <a href="#api_nan_compile_script">`NanCompileScript(Handle)`</a>) and make new local handles.\n\n```c++\nLocal<String> s = NanNew<String>("value");\n\n...\n\nPersistent<Object> o;\n\n...\n\nLocal<Object> lo = NanNew(o);\n\n```\n\n<a name="api_nan_undefined"></a>\n### Local&lt;Primitive&gt; NanUndefined()\n\nUse instead of `Undefined()`\n\n<a name="api_nan_null"></a>\n### Local&lt;Primitive&gt; NanNull()\n\nUse instead of `Null()`\n\n<a name="api_nan_true"></a>\n### Local&lt;Boolean&gt; NanTrue()\n\nUse instead of `True()`\n\n<a name="api_nan_false"></a>\n### Local&lt;Boolean&gt; NanFalse()\n\nUse instead of `False()`\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\nFor convenience, `NanReturnValue` also accepts common primitives directly by implicitly performing an overloaded `NanNew(T)`.\n\n```c++\nNanReturnValue("FooBar!");\nNanReturnValue(true);\nNanReturnValue(12);\nNanReturnValue(3.14);\n```\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_return_this"></a>\n### NanReturnThis()\n\nUse `NanReturnThis` when you want to return `This` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnThis();\n}\n```\n\n<a name="api_nan_return_holder"></a>\n### NanReturnHolder()\n\nUse `NanReturnHolder` when you want to return `Holder` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnHolder();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope` when you do not wish to return handles (`Handle` or `Local`) to the surrounding scope (or in functions directly exposed to V8, as they do not return values in the normal sense):\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nThis method is not directly exposed to V8, nor does it return a handle, so it uses an unescapable scope:\n\n```c++\nbool Foo::Bar() {\n  NanScope();\n\n  Local<Boolean> val = NanFalse();\n  ...\n  return val->Value();\n}\n```\n\n<a name="api_nan_escapable_scope"></a>\n### NanEscapableScope()\n\nThe separation of handle scopes into escapable and inescapable scopes makes `NanEscapableScope()` necessary, use it in place of `HandleScope scope` when you later wish to return a handle (`Handle` or `Local`) from the scope, this is for internal functions not directly exposed to V8:\n\n```c++\nHandle<String> Foo::Bar() {\n  NanEscapableScope();\n\n  return NanEscapeScope(NanNew<String>("FooBar!"));\n}\n```\n\n<a name="api_nan_escape_scope"></a>\n### Local&lt;T&gt; NanEscapeScope(Handle&lt;T&gt; value);\nUse together with `NanEscapableScope` to escape the scope. Corresponds to `HandleScope::Close` or `EscapableHandleScope::Escape`.\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanNew(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(const node::ObjectWrap &amp;obj)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(NanNew<String>("end"))\n```\n\n<a name="api_nan_symbol"></a>\n### ~~Local&lt;String&gt; NanSymbol(const char *)~~\n\nDeprecated. Use `NanNew<String>` instead.\n~~Use to create string symbol objects (i.e. `v8::String::NewSymbol(x)`), for getting and setting object properties, or names of objects.~~\n\n```c++\nbool foo = false;\nif (obj->Has(NanNew<String>("foo")))\n  foo = optionsObj->Get(NanNew<String>("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply returns `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### ~~void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)~~\n\nDeprecated. Use something else.\n\n~~When you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:~~\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\n...\ndelete[] reinterpret_cast<char*>(decoded);\n```\n\n<a name="api_nan_c_string"></a>\n### ~~char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])~~\n\nDeprecated. Use `String::Utf8Value` or `NanUtf8String` instead.\n\n~~When you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:~~\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n...\ndelete[] name;\n```\n\n<a name="api_nan_ascii_string"></a>\n### NanAsciiString\n\nContrary to the name, this is not actually an ASCII string, it is a one-byte string with no particular encoding. Do not use unless you actually need this incorrect legacy behavior. Consider fixing your broken code instead. If you actually have a proper ASCII-string, use UTF-8, which is a proper superset of ASCII.\nConvert a `String` to zero-terminated, sort-of Ascii-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanAsciiString(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanAsciiString baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanAsciiString *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanAsciiString(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n<a name="api_nan_utf8_string"></a>\n### NanUtf8String\n\nEquivalent to `String::Utf8Value`, it only exists for the sake of completeness.\nConvert a `String` to zero-terminated, Utf8-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanUtf8String(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanUtf8String baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanUtf8String *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanUtf8String(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n\n<a name="api_nan_ucs2_string"></a>\n### NanUcs2String\n\nEquivalent to `String::Value`, it only exists for the sake of completeness.\nConvert a `String` to zero-terminated, Ucs2-encoded `uint16_t *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanUcs2String(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanUcs2String baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanUcs2String *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanUcs2String(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanNew<String>("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanNew<String>("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanNew<String>("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nNanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NanFreeCallback` and a hint for the garbage collector.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_new_context_handle"></a>\n### ~~Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])~~\n\nDeprecated. Use `NanNew<Context>` instead.\n\n~~Creates a new `Local<Context>` handle.~~\n\n```c++\nLocal<FunctionTemplate> ftmpl = NanNew<FunctionTemplate>();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_get_current_context"></a>\n### Local&lt;Context&gt; NanGetCurrentContext()\n\nGets the current context.\n\n```c++\nLocal<Context> ctx = NanGetCurrentContext();\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = NanNew<Object>();\nobj->Set(NanNew<String>("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(persistentHandle, obj)\n```\n\n<a name="api_nan_make_weak_persistent"></a>\n### _NanWeakCallbackInfo&lt;T, P&gt;* NanMakeWeakPersistent(Handle&lt;T&gt;, P*, _NanWeakCallbackInfo&lt;T, P&gt;::Callback)\n\nCreates a weak persistent handle with the supplied parameter and `NAN_WEAK_CALLBACK`.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n\n...\n\n}\n\nLocal<Function> func;\n\n...\n\nint *parameter = new int(0);\nNanMakeWeakPersistent(func, parameter, &weakCallback);\n```\n\n<a name="api_nan_set_template"></a>\n### NanSetTemplate(templ, name, value [, attributes])\n\nUse to add properties on object and function templates.\n\n<a name="api_nan_set_prototype_template"></a>\n### NanSetPrototypeTemplate(templ, name, value [, attributes])\n\nUse to add prototype properties on function templates.\n\n<a name="api_nan_set_instance_template"></a>\n### NanSetInstanceTemplate(templ, name, value [, attributes])\n\nUse to add instance properties on function templates.\n\n<a name="api_nan_make_callback"></a>\n### NanMakeCallback(target, func, argc, argv)\n\nUse instead of `node::MakeCallback` to call javascript functions. This (or `NanCallback`) is the only proper way of calling functions. You must _*never, ever*_ directly use `Function::Call`, it will lead to run-time failures.\n\n<a name="api_nan_encode"></a>\n### NanEncode(const void*, size_t[, enum Nan::Encoding])\n\nReplaces `node::Encode`.\n\n<a name="api_nan_decode_bytes"></a>\n### NanDecodeBytes(v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\n\nReplaces `node::DecodeBytes`.\n\n<a name="api_nan_decode_write"></a>\n### NanDecodeWrite(char *, size_t, v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\n\nReplaces `node::DecodeWrite`.\n\n<a name="api_nan_compile_script"></a>\n### NanCompileScript(Handle<String> s [, const ScriptOrigin&amp; origin])\n\nUse to create new scripts bound to the current context.\n\n<a name="api_nan_run_script"></a>\n### NanRunScript(script)\n\nUse to run both bound and unbound scripts.\n\n<a name="api_nan_adjust_external_memory"></a>\n### NanAdjustExternalMemory(int change_in_bytes)\n\nSimply does `AdjustAmountOfExternalAllocatedMemory`, note that the argument and returned value have type `int`.\n\n<a name="api_nan_add_gc_epilogue_callback"></a>\n### NanAddGCEpilogueCallback(GCEpilogueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCEpilogueCallback`\n\n<a name="api_nan_add_gc_prologue_callback"></a>\n### NanAddGCPrologueCallback(GCPrologueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCPrologueCallback`\n\n<a name="api_nan_remove_gc_epilogue_callback"></a>\n### NanRemoveGCEpilogueCallback(GCEpilogueCallback callback)\n\nSimply does `RemoveGCEpilogueCallback`\n\n<a name="api_nan_remove_gc_prologue_callback"></a>\n### NanRemoveGCPrologueCallback(GCPrologueCallback callback)\n\nSimply does `RemoveGCPrologueCallback`\n\n<a name="api_nan_get_heap_statistics"></a>\n### NanGetHeapStatistics(HeapStatistics *heap_statistics)\n\nSimply does `GetHeapStatistics`\n\n<a name="api_nan_set_counter_function"></a>\n### NanSetCounterFunction(CounterLookupCallback cb)\n\nSimply does `SetCounterFunction`\n\n<a name="api_nan_set_create_histogram_function"></a>\n### NanSetCreateHistogramFunction(CreateHistogramCallback cb)\n\nSimply does `SetCreateHistogramFunction`\n\n<a name="api_nan_set_add_histogram_sample_function"></a>\n### NanSetAddHistogramSampleFunction(AddHistogramSampleCallback cb)\n\nSimply does `SetAddHistogramSampleFunction`\n\n<a name="api_nan_idle_notification"></a>\n### NanIdleNotification(int idle_time_in_ms)\n\nSimply does `IdleNotification`\n\n<a name="api_nan_low_memory_notification"></a>\n### NanLowMemoryNotification()\n\nSimply does `LowMemoryNotification`\n\n<a name="api_nan_context_disposed_notification"></a>\n### NanContextDisposedNotification()\n\nSimply does `ContextDisposedNotification`\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  NanError(NanNew<String>("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  NanNull(),\n  NanNew<String>("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetFunction()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`. You can check if a `NanCallback` is empty with the `bool IsEmpty()` method. Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `ErrorMessage()` and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then use `SetErrorMessage()` to set an error message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SaveToPersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\n  // Get the error message (or NULL)\n  const char *ErrorMessage();\n\n  // Set an error message\n  void SetErrorMessage(const char *msg);\n\nprotected:\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n<a name="api"></a>\n### Tests\n\nTo run the NAN tests do:\n\n``` sh\nnpm install\nnpm run-script rebuild-tests\nnpm test\n```\n\nOr just:\n\n``` sh\nnpm install\nmake test\n```\n\n## Porting\n\nFollows is a guide to porting your C++ node to NAN.\n\n<table><tbody>\n\n<tr><th>Aspect</th><th>Without NAN</th><th>With NAN</th></tr>\n\n<tr><td>Function declaration</td><td><pre>class MyClass : public ObjectWrap {\n    ....\n    static Handle<Value> ToString(const Arguments& args);\n    ....\n}</pre></td></th><td><pre>class MyClass : public ObjectWrap {\n    ....\n    static NAN_METHOD(ToString);\n    ....\n}</pre></td></tr>\n\n<tr><td>Function definition</td><td><pre>Handle<Value>\nMyClass::ToString(const Arguments& args)\n{\n\tHandleScope scope;\n\t....\n}</pre></td></th><td><pre>\nNAN_METHOD(MyClass::ToString)\n{\n  NanScope();\n  ....\n}</pre></td></tr>\n\n<tr><td>Return a value</td><td><pre>return scope.Close(result);</pre></td></th><td><pre>NanReturnValue(result);</pre></td></tr>\n\n<tr><td>Return undefined</td><td><pre>return Undefined();</pre></td></th><td><pre>NanReturnUndefined();</pre></td></tr>\n\n<tr><td>Throw an error</td><td><pre>return ThrowException(\n  Exception::Error(\n    String::New("Error text...")));</pre></td></th><td><pre>return NanThrowError("Error text...");</pre></td></tr>\n\n<tr><td>New v8 string literal</td><td><pre>String::NewSymbol("my text")</pre></td></th><td><pre>NanNew("my text")</pre></td></tr>\n\n</tbody></table>\n\n## Contributors\n\n<a name="governance"></a>\n\n## Governance & Contributing\n\nNAN is governed by the [io.js](https://iojs.org/) Addon API Working Group\n\n### Addon API Working Group (WG)\n\nThe NAN project is jointly governed by a Working Group which is responsible for high-level guidance of the project.\n\nMembers of the WG are also known as Collaborators, there is no distinction between the two, unlike other io.js projects.\n\nThe WG has final authority over this project including:\n\n* Technical direction\n* Project governance and process (including this policy)\n* Contribution policy\n* GitHub repository hosting\n* Maintaining the list of additional Collaborators\n\nFor the current list of WG members, see the project [README.md](./README.md#collaborators).\n\nIndividuals making significant and valuable contributions are made members of the WG and given commit-access to the project. These individuals are identified by the WG and their addition to the WG is discussed via GitHub and requires unanimous consensus amongst those WG members participating in the discussion with a quorum of 50% of WG members required for acceptance of the vote.\n\n_Note:_ If you make a significant contribution and are not considered for commit-access log an issue or contact a WG member directly.\n\nFor the current list of WG members / Collaborators, see the project [README.md](./README.md#collaborators).\n\n### Consensus Seeking Process\n\nThe WG follows a [Consensus Seeking](http://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision making model.\n\nModifications of the contents of the NAN repository are made on a collaborative basis. Anybody with a GitHub account may propose a modification via pull request and it will be considered by the WG. All pull requests must be reviewed and accepted by a WG member with sufficient expertise who is able to take full responsibility for the change. In the case of pull requests proposed by an existing WG member, an additional WG member is required for sign-off. Consensus should be sought if additional WG members participate and there is disagreement around a particular modification.\n\nIf a change proposal cannot reach a consensus, a WG member can call for a vote amongst the members of the WG. Simple majority wins.\n\n### Developer\'s Certificate of Origin 1.0\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or\n* (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or\n* (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it.\n\n<a name="collaborators"></a>\n### WG Members / Collaborators\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td><td>-</td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n<tr><th align="left">David Siegel</th><td><a href="https://github.com/agnat">GitHub/agnat</a></td><td>-</td></tr>\n</tbody></table>\n\n## Licence &amp; copyright\n\nCopyright (c) 2015 NAN WG Members / Collaborators (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
172 silly install resolved     readmeFilename: 'README.md',
172 silly install resolved     bugs: { url: 'https://github.com/iojs/nan/issues' },
172 silly install resolved     homepage: 'https://github.com/iojs/nan',
172 silly install resolved     _id: 'nan@1.8.4',
172 silly install resolved     _shasum: '3c76b5382eab33e44b758d2813ca9d92e9342f34',
172 silly install resolved     _from: 'nan@1.8.4',
172 silly install resolved     _resolved: 'https://registry.npmjs.org/nan/-/nan-1.8.4.tgz' } ]
173 info install bindings@1.2.1 into C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
174 info install nan@1.8.4 into C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
175 info installOne bindings@1.2.1
176 verbose installOne of bindings to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt not in flight; installing
177 info installOne nan@1.8.4
178 verbose installOne of nan to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt not in flight; installing
179 verbose lock using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\nan-5a3ed46edd989f48.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
180 verbose lock using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\bindings-1f8fb83cd01a212a.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
181 silly install write writing nan 1.8.4 to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
182 silly install write writing bindings 1.2.1 to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
183 verbose unbuild node_modules\bcrypt\node_modules\nan
184 verbose unbuild node_modules\bcrypt\node_modules\bindings
185 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan is being purged from base C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions
186 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
187 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings is being purged from base C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions
188 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
189 verbose tar unpack C:\Users\hp1\AppData\Roaming\npm-cache\nan\1.8.4\package.tgz
190 verbose tar unpacking to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
191 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan is being purged
192 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
193 verbose tar unpack C:\Users\hp1\AppData\Roaming\npm-cache\bindings\1.2.1\package.tgz
194 verbose tar unpacking to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
195 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings is being purged
196 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
197 silly gunzTarPerm modes [ '777', '666' ]
198 silly gunzTarPerm modes [ '777', '666' ]
199 silly gunzTarPerm extractEntry package.json
200 silly gunzTarPerm modified mode [ 'package.json', 436, 438 ]
201 silly gunzTarPerm extractEntry package.json
202 silly gunzTarPerm modified mode [ 'package.json', 420, 438 ]
203 silly gunzTarPerm extractEntry README.md
204 silly gunzTarPerm modified mode [ 'README.md', 436, 438 ]
205 silly gunzTarPerm extractEntry include_dirs.js
206 silly gunzTarPerm modified mode [ 'include_dirs.js', 436, 438 ]
207 silly gunzTarPerm extractEntry LICENSE.md
208 silly gunzTarPerm modified mode [ 'LICENSE.md', 436, 438 ]
209 silly gunzTarPerm extractEntry .dntrc
210 silly gunzTarPerm modified mode [ '.dntrc', 436, 438 ]
211 silly gunzTarPerm extractEntry appveyor.yml
212 silly gunzTarPerm modified mode [ 'appveyor.yml', 436, 438 ]
213 silly gunzTarPerm extractEntry nan.h
214 silly gunzTarPerm modified mode [ 'nan.h', 436, 438 ]
215 silly gunzTarPerm extractEntry nan_implementation_12_inl.h
216 silly gunzTarPerm modified mode [ 'nan_implementation_12_inl.h', 436, 438 ]
217 silly gunzTarPerm extractEntry nan_implementation_pre_12_inl.h
218 silly gunzTarPerm modified mode [ 'nan_implementation_pre_12_inl.h', 436, 438 ]
219 silly gunzTarPerm extractEntry nan_new.h
220 silly gunzTarPerm modified mode [ 'nan_new.h', 436, 438 ]
221 silly gunzTarPerm extractEntry nan_string_bytes.h
222 silly gunzTarPerm modified mode [ 'nan_string_bytes.h', 436, 438 ]
223 silly gunzTarPerm extractEntry CHANGELOG.md
224 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 436, 438 ]
225 silly gunzTarPerm extractEntry README.md
226 silly gunzTarPerm modified mode [ 'README.md', 420, 438 ]
227 silly gunzTarPerm extractEntry bindings.js
228 silly gunzTarPerm modified mode [ 'bindings.js', 420, 438 ]
229 verbose write writing to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings\package.json
230 info preinstall bindings@1.2.1
231 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings\package.json
232 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings\package.json
233 silly install resolved []
234 verbose about to build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
235 info build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
236 info linkStuff bindings@1.2.1
237 silly linkStuff bindings@1.2.1 has C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules as its parent node_modules
238 verbose linkBins bindings@1.2.1
239 verbose linkMans bindings@1.2.1
240 verbose rebuildBundles bindings@1.2.1
241 info install bindings@1.2.1
242 info postinstall bindings@1.2.1
243 verbose unlock done using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\bindings-1f8fb83cd01a212a.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\bindings
244 verbose write writing to C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan\package.json
245 info preinstall nan@1.8.4
246 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan\package.json
247 verbose readDependencies loading dependencies from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan\package.json
248 silly install resolved []
249 verbose about to build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
250 info build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
251 info linkStuff nan@1.8.4
252 silly linkStuff nan@1.8.4 has C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules as its parent node_modules
253 verbose linkBins nan@1.8.4
254 verbose linkMans nan@1.8.4
255 verbose rebuildBundles nan@1.8.4
256 info install nan@1.8.4
257 info postinstall nan@1.8.4
258 verbose unlock done using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\nan-5a3ed46edd989f48.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt\node_modules\nan
259 verbose about to build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
260 info build C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
261 info linkStuff bcrypt@0.8.3
262 silly linkStuff bcrypt@0.8.3 has C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules as its parent node_modules
263 verbose linkBins bcrypt@0.8.3
264 verbose linkMans bcrypt@0.8.3
265 verbose rebuildBundles bcrypt@0.8.3
266 verbose rebuildBundles [ 'bindings', 'nan' ]
267 info install bcrypt@0.8.3
268 verbose unsafe-perm in lifecycle true
269 info bcrypt@0.8.3 Failed to exec install script
270 verbose unlock done using C:\Users\hp1\AppData\Roaming\npm-cache\_locks\bcrypt-76c4361bc2ffd257.lock for C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
271 verbose stack Error: bcrypt@0.8.3 install: `node-gyp rebuild`
271 verbose stack Exit status 1
271 verbose stack     at EventEmitter.<anonymous> (C:\Program Files\nodejs\node_modules\npm\lib\utils\lifecycle.js:213:16)
271 verbose stack     at EventEmitter.emit (events.js:110:17)
271 verbose stack     at ChildProcess.<anonymous> (C:\Program Files\nodejs\node_modules\npm\lib\utils\spawn.js:24:14)
271 verbose stack     at ChildProcess.emit (events.js:110:17)
271 verbose stack     at maybeClose (child_process.js:1015:16)
271 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:1087:5)
272 verbose pkgid bcrypt@0.8.3
273 verbose cwd C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules
274 error Windows_NT 6.3.9600
275 error argv "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "bcrypt"
276 error node v0.12.5
277 error npm  v2.11.2
278 error code ELIFECYCLE
279 error bcrypt@0.8.3 install: `node-gyp rebuild`
279 error Exit status 1
280 error Failed at the bcrypt@0.8.3 install script 'node-gyp rebuild'.
280 error This is most likely a problem with the bcrypt package,
280 error not with npm itself.
280 error Tell the author that this fails on your system:
280 error     node-gyp rebuild
280 error You can get their info via:
280 error     npm owner ls bcrypt
280 error There is likely additional logging output above.
281 verbose exit [ 1, true ]
282 verbose unbuild node_modules\bcrypt
283 info preuninstall bcrypt@0.8.3
284 info uninstall bcrypt@0.8.3
285 verbose unbuild rmStuff bcrypt@0.8.3 from C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules
286 info postuninstall bcrypt@0.8.3
287 silly gentlyRm C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt is being purged from base C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions
288 verbose gentlyRm don't care about contents; nuking C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
289 silly vacuum-fs purging C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules\bcrypt
290 silly vacuum-fs quitting because other entries in C:\Users\hp1\Desktop\Projects\Node.js_Projects\Connetions\node_modules
